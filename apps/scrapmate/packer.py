# -*- coding: utf-8 -*-

import logging
import traceback

from lxml import etree
from lxml.builder import E
from flask import url_for

from apps.common import urldealer as ud
from apps.common import toolbox as tb

log = logging.getLogger()

ACCEPTED_EXT = []

def pack_rss(generator):
    yield '''<rss version="2.0">
<channel>
  <title>My Torrent RSS</title>
  <link>https://google.com</link>
  <description>It has been generated by Gathermate.</description>\n'''
    for article in generator:
        for item in article:
            try:
                e_item = E.item(E.title(unicode(item['name'])))
                e_enclosure = E.enclosure()
                link = None
                enclosure = None
                if item['type'] == 'unknown':
                    link = url_for('.order',
                                   _external=True,
                                   order='down',
                                   url=item['link'])
                elif item['type'] == 'file' and tb.get_ext(item['name'])[1] in ACCEPTED_EXT:
                    enclosure = url_for('.order',
                                  _external=True,
                                  order='down',
                                  url=item['link'],
                                  ticket=ud.unsplit_qs(item['ticket']))
                    e_enclosure.set('type', tb.get_mime(item['name']))
                elif item['type'] == 'magnet':
                    enclosure = item['link']
                    e_enclosure.set('type', tb.get_mime(enclosure))
                else:
                    link = item['link']
                if enclosure:
                    e_enclosure.set('url', unicode(enclosure))
                    e_item.append(e_enclosure)
                if link:
                    e_link = E.link(link)
                    e_item.append(e_link)
                yield etree.tostring(e_item, pretty_print=True, encoding='utf-8')
            except:
                log.error('\n%s', traceback.format_exc())
                log.error('Skipped item: %s', item)
    yield '''</channel>
</rss>'''


def pack_list(data_dict):
    data_dict['articles'] = sorted(data_dict['articles'].items(), reverse=True)
    return data_dict

def pack_item(items):
    denied = []
    for idx, item in enumerate(items):
        if item['type'] in ['magnet', 'link']:
            item['link'] = ud.unquote(item['link'])
            continue
        if not tb.get_ext(item['name'])[1] in ACCEPTED_EXT:
            log.warning('%s does not have accepted extension.', item['name'])
            denied.append(idx)
            continue
        item['ticket'] = ud.quote(ud.unsplit_qs(item['ticket']))
    items = [ item for idx, item in enumerate(items) if not idx in denied ]
    return items
