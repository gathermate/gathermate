#!/bin/sh

OPTION=$1
TARGET=$2

NAME=my-flask-server
PREFIX="Gathermate :"

PYTHON=python
eval "$PYTHON"_package=python-minimal
GIT=git
eval "$GIT"_package=git
PIP=pip
eval "$PIP"_package=python-pip

REPOSITORY=https://github.com/gathermate/gathermate.git

CONFIG=config.py
REQUIRE_PYTHON=2.7

OPT=/opt
APPS=$OPT/apps
ROOT=$APPS/$NAME
VENV=$ROOT/venv
CACHE_PATH=$APPS/tmp

init_common(){
    DAEMON_SCRIPT_PATH=$INIT_PATH/$DAEMON_SCRIPT
}

init_debian(){
    DAEMON_SCRIPT=$NAME
    INSTALL="apt install"
    REQUIREMENTS=requirements.txt
    INIT_PATH=/etc/init.d
    SERVICE="service $DAEMON_SCRIPT"
    init_common
}

init_entware(){
    DAEMON_SCRIPT=S89$NAME
    INSTALL="opkg install"
    REQUIREMENTS=requirements_entware.txt
    INIT_PATH=$OPT/etc/init.d
    eval "$GIT"_package=\"git git-http\"
    eval "$PYTHON"_package=python-light
    init_common
    SERVICE=$DAEMON_SCRIPT_PATH
}

install_package(){
    # You must decalre PACKAGE variable before call it.
    echo "$PREFIX Do you want to install $PACKAGE (Y/n)"
    read -r choice
    case "$choice" in
        y|Y|"")
            echo "$PREFIX Install $PACKAGE..."
            $INSTALL $PACKAGE
            ;;
        n|N)
            echo "$PREFIX Exit..."
            exit 0
            ;;
        *)
            echo "$PREFIX Invalid option - exit..."
            exit 1
            ;;
    esac
}

check_command(){
    # You must decalre COMMAND variable before call it.
    if [ -x "$(get_command_path)" ]; then
        return 0
    else
        echo "$PREFIX Could not execute $COMMAND."
        return 1
    fi
}

check_commands(){
    # You must decalre COMMANDS variable before call it.
    LIST=
    for i in $COMMANDS; do
        COMMAND=$i
        if ! check_command; then
            ITEM=$i
            appendToList
        fi
    done
}

get_command_path(){
    # You must decalre COMMAND variable before call it.
    echo $(which $COMMAND)
}

get_python_version(){
    echo $($PYTHON -c 'import sys; print(".".join(str(d) for d in sys.version_info[:2]))')
}

backup_file(){
    # You must declare ORIGIN variable before call it.
    SUFFIX="-$(date +%Y%m%d%H%M)"
    BACKUP=$ORIGIN$SUFFIX
    echo "$PREFIX Backup previous $ORIGIN to $BACKUP"
    if mv $ORIGIN $BACKUP; then
        return 0
    else
        return 1
    fi
}

appendToList(){
    # You must empty LIST variable before call it.
    if [ -z "$LIST" ]; then
        LIST=$ITEM
    else
        LIST="$LIST $ITEM"
    fi
}

check_permission(){
    echo "$PREFIX Check permission..."
    FOLDERS="$OPT $INIT_PATH"
    LIST=
    for i in $FOLDERS; do
        if [ -d "$i" ] && [ ! -w "$i" ]; then
            ITEM=$i
            appendToList
        fi
    done

    if [ -n "$LIST" ]; then
        for i in $LIST; do
            echo "$PREFIX $i is not writable."
        done
        echo "$PREFIX Check your permission on above folder(s) first."
        echo "$PREFIX Or run script with sudo."
        echo "$PREFIX ex) sudo install-gathermate -i debian"
        exit 1
    fi
}

check_packages(){
    echo "$PREFIX Check required packages..."
    COMMANDS="$PYTHON $PIP $GIT"
    check_commands
    if [ -n "$LIST" ]; then
        OLD_LIST=$LIST
        LIST=
        echo "$PREFIX It seems to be not installed : $OLD_LIST"
        for i in $OLD_LIST; do
            ITEM=$(eval echo \$"$i"_package)
            appendToList
        done
        PACKAGE=$LIST
        install_package
        check_commands
        if [ -n "$LIST" ]; then
            echo "$PREFIX Still could not execute $LIST."
            exit 1
        fi
    fi
}

before_install(){
    check_permission
    check_packages
    if [ ! -d "$CACHE_PATH" ]; then
        mkdir $CACHE_PATH
    fi
    if [ "$TARGET" = "entware" ]; then
        $INSTALL python-lxml
    fi
}

after_install(){
    if [ "$TARGET" = "entware" ]; then
        cp -r $OPT/lib/python2.7/site-packages/lxml* $VENV/lib/python2.7/site-packages
    fi
    mkdir -p $ROOT/var/log $ROOT/var/run
    $SERVICE start
}

clone_repository(){
    echo "$PREFIX Clone $REPOSITORY..."
    if [ -d "$ROOT" ]; then
        echo "$PREFIX $ROOT already exists."
        exit 1
    fi
    $GIT clone $REPOSITORY $ROOT
}

set_daemon_script(){
    echo "$PREFIX Check daemon script..."
    if [ -e "$DAEMON_SCRIPT_PATH" ]; then
        echo "$PREFIX $DAEMON_SCRIPT_PATH exists."
        ORIGIN=$DAEMON_SCRIPT_PATH
        if ! backup_file; then
            exit 1
        fi
    fi

    echo "$PREFIX Copy $ROOT/$DAEMON_SCRIPT to $DAEMON_SCRIPT_PATH"
    if cp $ROOT/$DAEMON_SCRIPT $DAEMON_SCRIPT_PATH; then
        echo "$PREFIX Make $DAEMON_SCRIPT_PATH executable."
        chmod ug=rwx,o=rx $DAEMON_SCRIPT_PATH
        sed -i -e "s@^ROOT=.*@ROOT=$ROOT@g; s@^ACTIVATE=.*@ACTIVATE=$VENV/bin/activate@g" $DAEMON_SCRIPT_PATH
    else
        exit 1
    fi
}

copy_config(){
    INSTANCE_CONFIG=$ROOT/instance/$CONFIG
    if [ ! -d "$ROOT/instance" ]; then
        if ! mkdir $ROOT/instance; then
            exit 1
        fi
    fi
    echo "$PREFIX Copy $ROOT/$CONFIG to $INSTANCE_CONFIG"
    if [ -e "$INSTANCE_CONFIG" ]; then
        echo "$PREFIX $INSTANCE_CONFIG exists."
        ORIGIN=$INSTANCE_CONFIG
        if ! backup_file; then
            exit 1
        fi
    fi

    if ! cp $ROOT/$CONFIG $INSTANCE_CONFIG; then
        exit 1
    fi
}
check_python_version(){
    echo "$PREFIX Check Python version..."
    COMMAND=$PYTHON
    if ! check_command; then
        CURRENT_PYTHON=$(get_python_version)
        if [ "$CURRENT_PYTHON" = "$REQUIRE_PYTHON" ]; then
            echo "$PREFIX Python $CURRENT_PYTHON exists at $(get_command_path)"
        else
            echo "$PREFIX Python $CURRENT_PYTHON is not compatible with this program."
            PACKAGE=$python_package
            install_package
            CURRENT_PYTHON=$(get_python_version)
            if [ "$CURRENT_PYTHON" != "$REQUIRE_PYTHON" ]; then
                echo "$PREFIX Python virsion is still $CURRENT_PYTHON"
                exit 1
            fi
        fi
    fi
}
make_virtualenv(){
    HOME=$CACHE_PATH $PIP install virtualenv

    echo "$PREFIX Make $PYTHON virtual environment at $VENV"
    $PYTHON -m virtualenv $VENV -p $PYTHON

    if [ -e "$VENV/bin/activate" ]; then
        . $VENV/bin/activate
    else
        echo "$PREFIX Could not activate virtual environment."
        exit 1
    fi
}
install_python_packages(){
    if [ ! -e $ROOT/$REQUIREMENTS ]; then
        echo "$PREFIX $ROOT/$REQUIREMENTS is not found."
        exit 1
    fi

    echo "$PREFIX Install Python packages..."
    PIP_INSTALL_REQUIREMENTS="$PIP install -r $ROOT/$REQUIREMENTS"
    if [ -d "$CACHE_PATH" ]; then
        HOME=$CACHE_PATH $PIP_INSTALL_REQUIREMENTS
    else
        $PIP_INSTALL_REQUIREMENTS
    fi
}
install(){
    echo "$PREFIX Install to $TARGET"
    before_install
    clone_repository
    set_daemon_script
    copy_config
    check_python_version
    make_virtualenv
    install_python_packages
    after_install
}
uninstall(){
    echo "$PREFIX Uninstall from $TARGET"
    check_permission
    $SERVICE stop
    if [ -e $DAEMON_SCRIPT_PATH ]; then
        echo "$PREFIX Delete $DAEMON_SCRIPT_PATH"
        rm -f $DAEMON_SCRIPT_PATH
    fi
    if [ -e $ROOT ]; then
        echo "$PREFIX Delete $ROOT"
        rm -rf $ROOT
    fi
    echo "$PREFIX You need to uninstall $PYTHON $PIP $GIT manually if necessary."
    echo "$PREFIX Because it might already exist before installing Gathermate."
}

start(){
    case $OPTION in
        -i)
            WHAT_TO_DO=install
            ;;
        -u)
            WHAT_TO_DO=uninstall
            ;;
        *)
            echo
            echo "$PREFIX This script will clone https://github.com/gathermate/gathermate.git to"
            echo "$PREFIX $ROOT folder and install packages relative to python 2.7."
            echo "$PREFIX It is made for personal use at first and only tested with"
            echo "$PREFIX Debian on WSL and Entware on RT-AC68U Merlin Firmware."
            echo "$PREFIX So it has chance to not work properly."
            echo "$PREFIX You can install manually if you are not sure it's safe."
            echo
            echo "$PREFIX Usage: install-gathermate OPTION TARGET"
            echo
            echo "$PREFIX TARGET: debian    Debian on WSL"
            echo "$PREFIX         entware   Entware on RT-AC68U Merlin Firmware"
            echo "$PREFIX OPTION: -i        Install to TARGET"
            echo "$PREFIX         -u        Uninstall from TARGET"
            echo
            echo "$PREFIX ex) install -i entware"
            exit 0
            ;;
    esac
    case $TARGET in
        debian|entware)
            ;;
        *)
            echo "$PREFIX You need to choice the target. (debian or entware)"
            exit 1
            ;;
    esac
    echo "$PREFIX Are you sure to $TO_DO Gathermate on $TARGET? (yes/no)"
    read -r choice
    case "$choice" in
        yes)
            eval init_"$TARGET"
            $WHAT_TO_DO
            ;;
        no|*)
            echo "$PREFIX Exit..."
            exit 0
            ;;
    esac
}

start